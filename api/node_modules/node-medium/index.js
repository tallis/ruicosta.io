// Generated by CoffeeScript 1.6.3
(function() {
  var https;

  https = require('https');

  exports.rest = function(host, endpoint, method, callback) {
    var headers, options, req;
    headers = {
      'Accept': 'application/json'
    };
    options = {
      'host': host,
      'path': endpoint,
      'method': method,
      'headers': headers
    };
    req = https.request(options, function(res) {
      var responseString;
      res.setEncoding('utf-8');
      responseString = '';
      res.on('data', function(data) {
        return responseString += data;
      });
      return res.on('end', function() {
        var responseObject;
        responseObject = JSON.parse(responseString.replace('])}while(1);</x>', ''));
        return callback(responseObject);
      });
    });
    return req.end();
  };

  exports.getPost = function(collection, id, callback) {
    return exports.rest('medium.com', '/' + collection + '/' + id, 'GET', function(data) {
      var author, k, l, links, p, paragraphs, v, _i, _j, _len, _len1, _ref, _ref1;
      if (data.success) {
        paragraphs = [];
        _ref = data.payload.value.content.bodyModel.paragraphs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          links = [];
          _ref1 = p.markups;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            l = _ref1[_j];
            if (l.type === 3) {
              links.push({
                'start': l.start,
                'end': l.end,
                'href': l.href
              });
            }
          }
          paragraphs.push({
            'text': p.text,
            'type': p.type,
            'links': links
          });
        }
        author = ((function() {
          var _ref2, _results;
          _ref2 = data.payload.references.User;
          _results = [];
          for (k in _ref2) {
            v = _ref2[k];
            _results.push(v);
          }
          return _results;
        })())[0];
        collection = ((function() {
          var _ref2, _results;
          _ref2 = data.payload.references.Collection;
          _results = [];
          for (k in _ref2) {
            v = _ref2[k];
            _results.push(v);
          }
          return _results;
        })())[0];
        return callback({
          'success': true,
          'title': data.payload.value.title,
          'createdAt': data.payload.value.createdAt,
          'subTitle': data.payload.value.content.subtitle,
          'author': author,
          'collection': collection,
          'paragraphs': paragraphs
        });
      } else {
        return callback({
          'success': false
        });
      }
    });
  };

  exports.getCollection = function(collection, callback) {
    return exports.rest('medium.com', '/' + collection, 'GET', function(data) {
      var author, k, p, posts, v, _i, _len, _ref;
      if (data.success) {
        posts = [];
        _ref = data.payload.posts;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          posts.push({
            'id': p.id,
            'title': p.title,
            'createdAt': p.createdAt
          });
        }
        author = ((function() {
          var _ref1, _results;
          _ref1 = data.payload.references.User;
          _results = [];
          for (k in _ref1) {
            v = _ref1[k];
            _results.push(v);
          }
          return _results;
        })())[0];
        return callback({
          'success': true,
          'name': data.payload.value.name,
          'author': author,
          'createdAt': data.payload.value.createdAt,
          'description': data.payload.value.description,
          'shortDescription': data.payload.value.shortDescription,
          'posts': posts
        });
      } else {
        return callback({
          'success': false
        });
      }
    });
  };

  exports.getUser = function(username, callback) {
    return exports.rest('medium.com', '/@' + username, 'GET', function(data) {
      var c, collections, p, posts, _i, _j, _len, _len1, _ref, _ref1;
      if (data.success) {
        posts = [];
        _ref = data.payload.latestPosts;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          posts.push({
            'id': p.id,
            'title': p.title,
            'createdAt': p.createdAt
          });
        }
        collections = [];
        _ref1 = data.payload.collections;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          c = _ref1[_j];
          collections.push({
            'id': c.id,
            'title': c.title,
            'tags': c.tags,
            'createdAt': c.createdAt,
            'description': c.description,
            'shortDescription': c.shortDescription
          });
        }
        return callback({
          'success': true,
          'userId': data.payload.value.userId,
          'name': data.payload.value.name,
          'createdAt': data.payload.value.createdAt,
          'bio': data.payload.value.bio,
          'posts': posts,
          'collections': collections
        });
      } else {
        return callback({
          'success': false
        });
      }
    });
  };

}).call(this);
